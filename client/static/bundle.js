(()=>{var f=async(e,t)=>{let o=await fetch(`/key/${encodeURIComponent(e)}`),r;if(o.ok)r=JSON.parse(await o.json());else if(o.status===404)r=t;else throw new Error(`Failed to fetch value for key '${e}'. Response status: ${o.status}.`);if(r===void 0){if(t===void 0)throw new Error("Either ensure the desired value is set or furnish an initial value.");return t}return r};var l=async(e,t)=>{let o=await fetch(`/key/${encodeURIComponent(e)}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!o.ok)throw new Error(o.statusText)};var T=async(e,t)=>{let o=await fetch(`/topic/${encodeURIComponent(e)}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!o.ok)throw new Error(o.statusText)};var x=(e,t)=>{let o=new EventSource(`/topic/${encodeURIComponent(e)}`),r=n=>{let m=JSON.parse(n.data);t(m)};return o.addEventListener(e,r),()=>{o.removeEventListener(e,r),o.close()}};var g=e=>async t=>await l(e,t);var w=(e,t)=>async()=>await f(e,t);var v=(e,t)=>{let o=w(e,t),r=g(e);return{get:o,set:r}};var y=e=>async t=>await T(e,t);var J=e=>t=>x(e,t);var b=e=>{let t=y(e);return{on:J(e),emit:t}};var P=(e,t)=>{let{get:o,set:r}=v(e,t),n=window.crypto.randomUUID(),{emit:m,on:s}=b(n);return{get:o,set:async a=>{await r(a),await m(a)},onSet:s}};var u=(e,t=0)=>{let{get:o,set:r,onSet:n}=P(e,t);return{get:o,set:r,onSet:n,increment:async()=>{let i=await o();await r(i+1)},decrement:async()=>{let i=await o();await r(i-1)}}};var S=(e,t)=>{let{get:o,set:r}=u("frameNumber"),{get:n,set:m}=u("time"),s=[],i=async()=>{let a=o(),c=n(),[F,h]=await Promise.all([a,c]),p=Date.now(),C=p-h,V=F+1,d={index:V,timestamp:p,millisecondsSinceLastFrame:C};await Promise.all([m(p),r(V)]),await e(d),await Promise.all([...s].map(E=>E(d))),await t(d),requestAnimationFrame(i)};return requestAnimationFrame(i),a=>(s.push(a),()=>{let c=s.indexOf(a);s.splice(c,1)})};var N=S(async()=>{console.log("before")},async()=>{console.log("after")});N(async e=>{console.log(e)});})();
//# sourceMappingURL=bundle.js.map
